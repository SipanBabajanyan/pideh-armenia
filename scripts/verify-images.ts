import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function verifyImages() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\n')

    const products = await prisma.product.findMany()
    const baseUrl = 'http://localhost:3002'
    
    let accessibleCount = 0
    let inaccessibleCount = 0

    for (const product of products) {
      const imageUrl = `${baseUrl}${product.image}`
      
      try {
        const response = await fetch(imageUrl, { method: 'HEAD' })
        
        if (response.ok) {
          console.log(`‚úÖ ${product.name} - ${product.image}`)
          accessibleCount++
        } else {
          console.log(`‚ùå ${product.name} - ${product.image} (HTTP ${response.status})`)
          inaccessibleCount++
        }
      } catch (error) {
        console.log(`‚ùå ${product.name} - ${product.image} (–û—à–∏–±–∫–∞: ${error})`)
        inaccessibleCount++
      }
    }

    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:`)
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ: ${accessibleCount}`)
    console.log(`‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${inaccessibleCount}`)
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
verifyImages()
