// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkProducts() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n')
    
    const products = await prisma.product.findMany({
      orderBy: { category: 'asc' }
    })
    
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}\n`)
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = products.reduce((acc, product) => {
      if (!acc[product.category]) {
        acc[product.category] = []
      }
      acc[product.category].push(product)
      return acc
    }, {} as Record<string, any[]>)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    Object.entries(categories).forEach(([category, products]) => {
      console.log(`\nüìÅ ${category} (${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤):`)
      products.forEach(product => {
        const hasImage = product.image && product.image !== '' && !product.image.startsWith('http')
        const imageStatus = hasImage ? '‚úÖ' : '‚ùå'
        console.log(`  ${imageStatus} ${product.name} - ${product.price} ÷è (${product.image || '–Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})`)
      })
    })
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const withImages = products.filter(p => p.image && p.image !== '' && !p.image.startsWith('http'))
    const withoutImages = products.filter(p => !p.image || p.image === '' || p.image.startsWith('http'))
    
    console.log(`\nüì∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`)
    console.log(`  ‚úÖ –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${withImages.length}`)
    console.log(`  ‚ùå –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${withoutImages.length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkProducts()
