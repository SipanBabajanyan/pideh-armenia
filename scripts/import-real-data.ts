// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
import { PrismaClient } from '@prisma/client'
import { buyAmProducts, facebookProducts, companyInfo } from './collect-real-data'

const prisma = new PrismaClient()

async function importRealData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ...')
    await prisma.orderItem.deleteMany()
    await prisma.order.deleteMany()
    await prisma.product.deleteMany()

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å buy.am
    console.log('üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å buy.am...')
    const buyAmData = buyAmProducts.filter(p => p.name && p.price > 0)
    
    for (const product of buyAmData) {
      if (product.name && product.price && product.price > 0) {
        await prisma.product.create({
          data: {
            name: product.name,
            description: product.description || '',
            price: product.price,
            image: product.image || '/images/default-product.jpg',
            category: product.category || '–î—Ä—É–≥–∏–µ',
            ingredients: product.ingredients || [],
            isAvailable: product.isAvailable ?? true
          }
        })
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: ${product.name}`)
      }
    }

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å Facebook
    console.log('üìò –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã —Å Facebook...')
    const facebookData = facebookProducts.filter(p => p.name && p.price > 0)
    
    for (const product of facebookData) {
      if (product.name && product.price && product.price > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç
        const existingProduct = await prisma.product.findFirst({
          where: { name: product.name }
        })

        if (!existingProduct) {
          await prisma.product.create({
            data: {
              name: product.name,
              description: product.description || '',
              price: product.price,
              image: product.image || '/images/default-product.jpg',
              category: product.category || '–î—Ä—É–≥–∏–µ',
              ingredients: product.ingredients || [],
              isAvailable: product.isAvailable ?? true
            }
          })
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: ${product.name}`)
        } else {
          console.log(`‚ö†Ô∏è  –ü—Ä–æ–¥—É–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${product.name}`)
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
    console.log('üè¢ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏...')
    const companyInfoContent = `// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ PIDEH Armenia
export const companyInfo = {
  name: '${companyInfo.name}',
  description: '${companyInfo.description}',
  address: '${companyInfo.address}',
  phone: '${companyInfo.phone}',
  email: '${companyInfo.email}',
  workingHours: '${companyInfo.workingHours}',
  socialMedia: {
    facebook: '${companyInfo.socialMedia.facebook}',
    instagram: '${companyInfo.socialMedia.instagram}',
    website: '${companyInfo.socialMedia.website}'
  }
}

export default companyInfo
`

    await import('fs').then(fs => 
      fs.promises.writeFile(
        '/Users/user/AI-Projects/pideh-armenia/src/constants/company.ts', 
        companyInfoContent
      )
    )

    console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ src/constants/company.ts')

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const totalProducts = await prisma.product.count()
    console.log(`üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`)

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categories = await prisma.product.groupBy({
      by: ['category'],
      _count: { category: true }
    })

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:')
    categories.forEach(cat => {
      console.log(`  ${cat.category}: ${cat._count.category} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`)
    })

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importRealData()
