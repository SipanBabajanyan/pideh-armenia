// –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –ú–∞–ø–ø–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const imageMapping = {
  '–ö–æ–º–±–æ': [
    '/images/products/cmfpaig0f00007qqbr807vld2.jpg', // –ö–æ–º–±–æ ¬´–Ø –æ–¥–∏–Ω¬ª
    '/images/products/cmfpaig0g00017qqbkxwf2syz.jpg', // –ö–æ–º–±–æ ¬´–ú—ã –≤–¥–≤–æ–µ–º¬ª
    '/images/products/cmfpaig0i00027qqbxaeab5ng.jpg', // –ö–æ–º–±–æ ¬´–ú—ã –≥–æ–ª–æ–¥–Ω—ã¬ª
    '/images/products/cmfpaig0j00037qqbk8a0miac.jpg'  // –ö–æ–º–±–æ ¬´–ú—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã¬ª
  ],
  '–ü–∏–¥–µ': [
    '/images/products/cmfpaig0f00007qqbr807vld2.jpg', // –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∏–¥–µ
    '/images/products/cmfpaig0g00017qqbkxwf2syz.jpg', // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ
    '/images/products/cmfpaig0i00027qqbxaeab5ng.jpg', // –ï—â–µ –æ–¥–Ω–æ
    '/images/products/cmfpaig0j00037qqbk8a0miac.jpg'  // –ò –µ—â–µ –æ–¥–Ω–æ
  ],
  '–°–Ω—ç–∫': [
    '/images/products/cmfpaig0f00007qqbr807vld2.jpg', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    '/images/products/cmfpaig0g00017qqbkxwf2syz.jpg'
  ],
  '–°–æ—É—Å—ã': [
    '/images/products/cmfpaig0f00007qqbr807vld2.jpg', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    '/images/products/cmfpaig0g00017qqbkxwf2syz.jpg'
  ],
  '–û—Å–≤–µ–∂–∞—é—â–∏–µ –Ω–∞–ø–∏—Ç–∫–∏': [
    '/images/products/cmfpaig0f00007qqbr807vld2.jpg', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    '/images/products/cmfpaig0g00017qqbkxwf2syz.jpg'
  ]
}

async function addImagesToProducts() {
  try {
    console.log('üñºÔ∏è  –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...\n')
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const allProducts = await prisma.product.findMany()
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    const products = allProducts.filter(product => 
      !product.image || 
      product.image === '' || 
      product.image.startsWith('http')
    )
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`)
    
    let updatedCount = 0
    
    for (const product of products) {
      const categoryImages = imageMapping[product.category as keyof typeof imageMapping] || imageMapping['–ü–∏–¥–µ']
      
      // –í—ã–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏
      const imageIndex = updatedCount % categoryImages.length
      const selectedImage = categoryImages[imageIndex]
      
      await prisma.product.update({
        where: { id: product.id },
        data: { image: selectedImage }
      })
      
      console.log(`‚úÖ ${product.name} (${product.category}) ‚Üí ${selectedImage}`)
      updatedCount++
    }
    
    console.log(`\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalProducts = await prisma.product.count()
    const productsWithImages = await prisma.product.count({
      where: {
        AND: [
          { image: { not: '' } },
          { image: { not: null } },
          { image: { not: { startsWith: 'http' } } }
        ]
      }
    })
    
    console.log(`\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`  –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${totalProducts}`)
    console.log(`  –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ${productsWithImages}`)
    console.log(`  –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalProducts - productsWithImages}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

addImagesToProducts()