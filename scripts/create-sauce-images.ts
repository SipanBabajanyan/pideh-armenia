// –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—É—Å–æ–≤
import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

async function createSauceImages() {
  try {
    console.log('üçØ –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—É—Å–æ–≤...\n')
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—É—Å–æ–≤
    const saucesDir = path.join(process.cwd(), 'public', 'images', 'sauces')
    if (!fs.existsSync(saucesDir)) {
      fs.mkdirSync(saucesDir, { recursive: true })
      console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ—É—Å–æ–≤')
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ—É—Å—ã
    const sauces = await prisma.product.findMany({
      where: {
        category: '–°–æ—É—Å—ã'
      }
    })
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${sauces.length} —Å–æ—É—Å–æ–≤`)
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—É—Å–æ–≤
    for (const sauce of sauces) {
      const sauceName = sauce.name
      const svgContent = createSauceSVG(sauceName)
      const svgPath = path.join(saucesDir, `${sauceName.toLowerCase().replace(/\s+/g, '-')}.svg`)
      
      fs.writeFileSync(svgPath, svgContent)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const imagePath = `/images/sauces/${sauceName.toLowerCase().replace(/\s+/g, '-')}.svg`
      await prisma.product.update({
        where: { id: sauce.id },
        data: { image: imagePath }
      })
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${sauceName}`)
    }
    
    console.log('\nüéâ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—É—Å–æ–≤ —Å–æ–∑–¥–∞–Ω—ã!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

function createSauceSVG(sauceName: string): string {
  const colors = {
    '–ö–µ—Ç—á—É–ø': '#DC143C',
    '–ú–∞–π–æ–Ω–µ–∑': '#FFF8DC', 
    '–ì–æ—Ä—á–∏—Ü–∞': '#FFD700',
    '–ß–µ—Å–Ω–æ—á–Ω—ã–π —Å–æ—É—Å': '#F5F5DC',
    '–ö–æ–∫—Ç–µ–π–ª—å —Å–æ—É—Å': '#FF6347',
    '–°—ã—Ä–Ω—ã–π —Å–æ—É—Å': '#FFD700',
    '–ë–∞—Ä–±–µ–∫—é —Å–æ—É—Å': '#8B4513'
  }
  
  const color = colors[sauceName as keyof typeof colors] || '#FFD700'
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="200" height="200" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="sauceGradient" x1="0%" y1="0%" x2="0%" y2="100%">
      <stop offset="0%" style="stop-color:${color};stop-opacity:1" />
      <stop offset="100%" style="stop-color:${color}CC;stop-opacity:1" />
    </linearGradient>
  </defs>
  
  <!-- Sauce container -->
  <ellipse cx="100" cy="120" rx="40" ry="30" fill="url(#sauceGradient)" stroke="#333" stroke-width="2"/>
  
  <!-- Sauce top -->
  <ellipse cx="100" cy="100" rx="35" ry="25" fill="${color}80"/>
  
  <!-- Sauce drops -->
  <circle cx="85" cy="90" r="3" fill="${color}CC"/>
  <circle cx="95" cy="85" r="2" fill="${color}CC"/>
  <circle cx="105" cy="88" r="2.5" fill="${color}CC"/>
  <circle cx="115" cy="92" r="2" fill="${color}CC"/>
  
  <!-- Label -->
  <rect x="70" y="60" width="60" height="20" rx="3" fill="white" opacity="0.9"/>
  <text x="100" y="72" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#333">${sauceName}</text>
  
  <!-- Spoon -->
  <path d="M 140 80 Q 150 85 140 90 L 135 88 Q 145 83 135 78 Z" fill="#C0C0C0" stroke="#666" stroke-width="1"/>
</svg>`
}

createSauceImages()
