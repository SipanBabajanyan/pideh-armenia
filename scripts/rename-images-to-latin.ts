import { PrismaClient } from '@prisma/client'
import fs from 'fs'
import path from 'path'

const prisma = new PrismaClient()

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
function transliterate(text: string): string {
  const cyrillic = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
  const latin = 'abvgdeezhziyklmnoprstufhccsssyyeyuya'
  
  let result = text.toLowerCase()
  
  // –ó–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
  for (let i = 0; i < cyrillic.length; i++) {
    result = result.replace(new RegExp(cyrillic[i], 'g'), latin[i])
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
  result = result
    .replace(/[¬´¬ª""]/g, '') // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
    .replace(/\s+/g, '-') // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
    .replace(/[^\w\-\.]/g, '') // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –¥–µ—Ñ–∏—Å–æ–≤ –∏ —Ç–æ—á–µ–∫
    .replace(/-+/g, '-') // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
    .replace(/^-|-$/g, '') // –£–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  
  return result
}

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ
const fileMapping: Record<string, string> = {
  '2 –º—è—Å–∞ –ø–∏–¥–µ.jpg': '2-myasa-pide.jpg',
  '–ì—Ä–∏–±–Ω–æ–µ –ø–∏–¥–µ .jpg': 'gribnoe-pide.jpg', // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ
  '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏.jpg': 'kartofel-fri.jpg',
  '–ö–æ–º–±–æ ¬´–ú—ã –≤–¥–≤–æ–µ–º¬ª.jpg': 'kombo-my-vdvoyom.jpg',
  '–ö–æ–º–±–æ ¬´–ú—ã –≥–æ–ª–æ–¥–Ω—ã¬ª.jpg': 'kombo-my-golodny.jpg',
  '–ö–æ–º–±–æ ¬´–ú—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã¬ª.jpg': 'kombo-my-ochen-golodny.jpg',
  '–ö–æ–º–±–æ ¬´–Ø –æ–¥–∏–Ω¬ª.jpg': 'kombo-ya-odin.jpg',
  '–ö—É—Ä–∏–Ω—ã–µ –ª–µ–≥–∫–∏–µ –ø–∏–¥–µ.jpg': 'kurinye-legkie-pide.jpg',
  '–ö—É—Ä–∏–Ω—ã–π –ø–æ–ø–∫–æ—Ä–Ω.jpg': 'kurinyy-popkorn.jpg',
  '–û–≤–æ—â–Ω–æ–µ –ø–∏–¥–µ.jpg': 'ovoshchnoe-pide.jpg',
  '–ü–µ–ø–ø–µ—Ä–æ–Ω–∏ –ø–∏–¥–µ.jpg': 'pepperoni-pide.jpg',
  '–ü–∏–¥–µ Blue Pear.jpg': 'pide-blue-pear.jpg',
  '–ü–∏–¥–µ –•–æ—Ç –î–æ–≥.jpg': 'pide-hot-dog.jpg',
  '–ü–∏–¥–µ —Å –±–∞—Å—Ç—É—Ä–º–æ–π.jpg': 'pide-s-basturmoj.jpg',
  '–ü–∏–¥–µ —Å –±–µ–∫–æ–Ω–æ–º.jpg': 'pide-s-bekonom.jpg',
  '–ü–∏–¥–µ —Å –≥–æ–≤—è–¥–∏–Ω–æ–π.jpg': 'pide-s-govyadinoj.jpg',
  '–ü–∏–¥–µ —Å –ø—Ö–∞–ª–∏.jpg': 'pide-s-phali.jpg',
  '–°–ª–∞–¥–∫–∏–π –ø–∏–¥–µ.jpg': 'sladkiy-pide.jpg',
  '–®–ø–∏–Ω–∞—Ç.jpg': 'shpinat.jpg',
}

async function renameImagesToLatin() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É...\n')

    const imagesDir = path.join(process.cwd(), 'public', 'images')
    let renamedCount = 0
    let skippedCount = 0

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    for (const [cyrillicName, latinName] of Object.entries(fileMapping)) {
      const oldPath = path.join(imagesDir, cyrillicName)
      const newPath = path.join(imagesDir, latinName)
      
      if (fs.existsSync(oldPath)) {
        try {
          fs.renameSync(oldPath, newPath)
          console.log(`‚úÖ ${cyrillicName} -> ${latinName}`)
          renamedCount++
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ ${cyrillicName}: ${error}`)
        }
      } else {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${cyrillicName}`)
        skippedCount++
      }
    }

    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:`)
    console.log(`‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: ${renamedCount}`)
    console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    console.log(`\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...`)
    
    const products = await prisma.product.findMany()
    let updatedCount = 0

    for (const product of products) {
      const oldImagePath = product.image
      const fileName = path.basename(oldImagePath)
      
      if (fileMapping[fileName]) {
        const newImagePath = `/images/${fileMapping[fileName]}`
        
        await prisma.product.update({
          where: { id: product.id },
          data: { image: newImagePath }
        })
        
        console.log(`‚úÖ ${product.name}: ${oldImagePath} -> ${newImagePath}`)
        updatedCount++
      }
    }

    console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:`)
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${updatedCount}`)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
renameImagesToLatin()
