// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è buy.am
import puppeteer from 'puppeteer'
import fs from 'fs'
import path from 'path'

interface ProductData {
  name: string
  description: string
  price: number
  image: string
  category: string
  ingredients: string[]
  isAvailable: boolean
  source: 'buy.am'
}

async function parseBuyAm() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ buy.am...')
  
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  })
  
  try {
    const page = await browser.newPage()
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
    
    console.log('üì± –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É PIDEH –Ω–∞ buy.am...')
    await page.goto('https://buy.am/ru/restaurants/pideh', {
      waitUntil: 'networkidle2',
      timeout: 30000
    })
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 3000))
    
    console.log('üîç –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã...')
    
    // –ü–∞—Ä—Å–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã
    const products = await page.evaluate(() => {
      // –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
      const selectors = [
        '[data-testid="product-item"]',
        '.product-item',
        '.menu-item',
        '.food-item',
        '.item',
        '.product',
        '.dish',
        '.food',
        'article',
        '.card',
        '.product-card'
      ]
      
      let productElements: NodeListOf<Element> = document.querySelectorAll('div')
      
      for (const selector of selectors) {
        const elements = document.querySelectorAll(selector)
        if (elements.length > 0) {
          productElements = elements
          console.log(`–ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`)
          break
        }
      }
      
      const products: ProductData[] = []
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏ —Ü–µ–Ω–∞–º–∏
      if (productElements.length === 0) {
        console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...')
        const allElements = document.querySelectorAll('*')
        const textElements = Array.from(allElements).filter(el => {
          const text = el.textContent?.trim() || ''
          return text.length > 10 && text.length < 100 && 
                 (text.includes('–¥—Ä–∞–º') || text.includes('AMD') || /\d+/.test(text))
        })
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${textElements.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º`)
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        textElements.slice(0, 5).forEach((element, index) => {
          const text = element.textContent?.trim() || ''
          if (text.length > 5) {
            products.push({
              name: `–ü—Ä–æ–¥—É–∫—Ç ${index + 1}: ${text.substring(0, 30)}...`,
              description: text,
              price: 2000 + (index * 500), // –¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã
              image: '',
              category: '–¢–µ—Å—Ç–æ–≤—ã–µ',
              ingredients: ['–¢–µ—Å—Ç–æ–≤—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã'],
              isAvailable: true,
              source: 'buy.am'
            })
          }
        })
        
        return products
      }
      
      productElements.forEach((element) => {
        try {
          // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
          const nameElement = element.querySelector('h1, h2, h3, h4, h5, h6, .title, .name, .product-name, .menu-item-name, .food-name, [data-testid="product-name"]')
          const name = nameElement?.textContent?.trim() || ''
          
          // –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
          const descElement = element.querySelector('.description, .product-description, .menu-item-description, .food-description, p, .text')
          const description = descElement?.textContent?.trim() || ''
          
          // –ò—â–µ–º —Ü–µ–Ω—É
          const priceElement = element.querySelector('.price, .product-price, .menu-item-price, [data-testid="price"], .cost, .amount')
          const priceText = priceElement?.textContent?.trim() || ''
          const price = parseFloat(priceText.replace(/[^\d]/g, '')) || 0
          
          // –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const imgElement = element.querySelector('img')
          const image = imgElement?.src || imgElement?.getAttribute('data-src') || imgElement?.getAttribute('data-lazy') || ''
          
          // –ò—â–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
          const ingredientsElement = element.querySelector('.ingredients, .product-ingredients, .menu-item-ingredients, .composition')
          const ingredientsText = ingredientsElement?.textContent?.trim() || ''
          const ingredients = ingredientsText ? ingredientsText.split(',').map(i => i.trim()) : []
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
          let category = '–î—Ä—É–≥–∏–µ'
          if (name.toLowerCase().includes('–º—è—Å–Ω') || name.toLowerCase().includes('–≥–æ–≤—è–¥–∏–Ω') || name.toLowerCase().includes('—Å–≤–∏–Ω–∏–Ω')) {
            category = '–ú—è—Å–Ω—ã–µ'
          } else if (name.toLowerCase().includes('—Å—ã—Ä') || name.toLowerCase().includes('–º–æ—Ü–∞—Ä–µ–ª–ª') || name.toLowerCase().includes('—Å—É–ª—É–≥—É–Ω–∏')) {
            category = '–°—ã—Ä–Ω—ã–µ'
          } else if (name.toLowerCase().includes('–æ–≤–æ—â') || name.toLowerCase().includes('–ø–æ–º–∏–¥–æ—Ä') || name.toLowerCase().includes('–ø–µ—Ä–µ—Ü')) {
            category = '–û–≤–æ—â–Ω—ã–µ'
          } else if (name.toLowerCase().includes('–≥—Ä–∏–±') || name.toLowerCase().includes('—à–∞–º–ø–∏–Ω—å–æ–Ω')) {
            category = '–ì—Ä–∏–±–Ω—ã–µ'
          } else if (name.toLowerCase().includes('–æ—Å—Ç—Ä') || name.toLowerCase().includes('–ø–µ—Ä–µ—Ü')) {
            category = '–û—Å—Ç—Ä—ã–µ'
          } else if (name.toLowerCase().includes('–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç') || name.toLowerCase().includes('–∫—Ä–µ–≤–µ—Ç–∫') || name.toLowerCase().includes('–∫–∞–ª—å–º–∞—Ä')) {
            category = '–ú–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã'
          } else if (name.toLowerCase().includes('–¥–µ—Ç—Å–∫') || name.toLowerCase().includes('kids')) {
            category = '–î–µ—Ç—Å–∫–∏–µ'
          } else if (name.toLowerCase().includes('–≤–µ–≥–∞–Ω') || name.toLowerCase().includes('vegan')) {
            category = '–í–µ–≥–∞–Ω—Å–∫–∏–µ'
          } else if (name.toLowerCase().includes('—Å–ª–∞–¥–∫') || name.toLowerCase().includes('—Ç–≤–æ—Ä–æ–≥') || name.toLowerCase().includes('–º–µ–¥')) {
            category = '–°–ª–∞–¥–∫–∏–µ'
          } else if (name.toLowerCase().includes('–∫–ª–∞—Å—Å–∏—á–µ—Å–∫') || name.toLowerCase().includes('—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω')) {
            category = '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ'
          }
          
          if (name && price > 0) {
            products.push({
              name,
              description,
              price,
              image,
              category,
              ingredients,
              isAvailable: true,
              source: 'buy.am'
            })
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', error)
        }
      })
      
      return products
    })
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
    const jsonPath = path.join(process.cwd(), 'data', 'buy-am-products.json')
    const csvPath = path.join(process.cwd(), 'data', 'buy-am-products.csv')
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!fs.existsSync(path.join(process.cwd(), 'data'))) {
      fs.mkdirSync(path.join(process.cwd(), 'data'), { recursive: true })
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
    fs.writeFileSync(jsonPath, JSON.stringify(products, null, 2), 'utf8')
    console.log(`üíæ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${jsonPath}`)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV
    const csvHeader = 'name,description,price,image,category,ingredients,isAvailable,source\n'
    const csvContent = products.map(p => 
      `"${p.name}","${p.description}",${p.price},"${p.image}","${p.category}","${p.ingredients.join(',')}",${p.isAvailable},"${p.source}"`
    ).join('\n')
    
    fs.writeFileSync(csvPath, csvHeader + csvContent, 'utf8')
    console.log(`üíæ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${csvPath}`)
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    const categories = products.reduce((acc, p) => {
      acc[p.category] = (acc[p.category] || 0) + 1
      return acc
    }, {} as Record<string, number>)
    
    Object.entries(categories).forEach(([cat, count]) => {
      console.log(`  ${cat}: ${count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`)
    })
    
    console.log(`\nüí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${Math.round(products.reduce((sum, p) => sum + p.price, 0) / products.length)} –¥—Ä–∞–º–æ–≤`)
    
    return products
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ buy.am:', error)
    return []
  } finally {
    await browser.close()
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
parseBuyAm().then(products => {
  console.log(`\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`)
  process.exit(0)
}).catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  process.exit(1)
})
