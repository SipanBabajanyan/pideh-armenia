import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤
const additionalMapping: { [key: string]: string } = {
  '–°–ª–∞–¥–∫–∏–π –ø–∏–¥–µ': '/images/sladkiy-pide.jpg',
  '–ü–∏–¥–µ –•–æ—Ç –î–æ–≥': '/images/pide-hot-dog.jpg',
  '–ü–∏–¥–µ Blue Pear': '/images/pide-blue-pear.jpg',
  '–ë–∞—Ä–±–µ–∫—é —Å–æ—É—Å': '/images/BBQ-sauce-Pideh.jpg',
  '–ö–æ–∫—Ç–µ–π–ª—å —Å–æ—É—Å': '/images/Cocktail-sauce-Pideh.jpg',
  '–°—ã—Ä–Ω—ã–π —Å–æ—É—Å': '/images/caucasus-cheese.jpg',
  '–ì–æ—Ä—á–∏—Ü–∞': '/images/Mustard-sauce-Pideh.jpg',
  '–ö–æ–∫–∞-–ö–æ–ª–∞': '/images/cola-sprite-fanta.jpg',
  '–§–∞–Ω—Ç–∞': '/images/cola-sprite-fanta.jpg',
  '–°–ø—Ä–∞–π—Ç': '/images/cola-sprite-fanta.jpg',
  '–¢–∞–Ω': '/images/tan.jpg',
  '–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞': '/images/juice.jpg',
  '–°–æ–∫ (–∞—Å—Å–æ—Ä—Ç–∏)': '/images/juice.jpg',
  '–ö–æ–º–±–æ ¬´–ú—ã –≥–æ–ª–æ–¥–Ω—ã¬ª': '/images/kombo-my-golodny.jpg',
  '–ö–æ–º–±–æ ¬´–ú—ã –æ—á–µ–Ω—å –≥–æ–ª–æ–¥–Ω—ã¬ª': '/images/kombo-my-ochen-golodny.jpg',
  '2 –º—è—Å–∞ –ø–∏–¥–µ': '/images/2-myasa-pide.jpg',
  '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Å—ã—Ä–Ω–æ–µ –ø–∏–¥–µ': '/images/classic-chees.jpg',
  '–ö–∞–≤–∫–∞–∑—Å–∫–∏–π –ø–∏–¥–µ': '/images/caucasus-cheese.jpg'
}

async function fixRemainingImages() {
  try {
    console.log('üîÑ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...')
    
    const products = await prisma.product.findMany({
      where: {
        image: {
          startsWith: 'https://'
        }
      }
    })
    
    let updatedCount = 0
    
    for (const product of products) {
      const newImage = additionalMapping[product.name]
      
      if (newImage) {
        await prisma.product.update({
          where: { id: product.id },
          data: { image: newImage }
        })
        console.log(`‚úÖ ${product.name} -> ${newImage}`)
        updatedCount++
      } else {
        console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: ${product.name}`)
      }
    }
    
    console.log(`\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${updatedCount} —Ç–æ–≤–∞—Ä–æ–≤`)
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const allProducts = await prisma.product.findMany()
    const localImages = allProducts.filter(p => p.image.startsWith('/images/')).length
    const externalImages = allProducts.filter(p => p.image.startsWith('https://')).length
    
    console.log(`\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`)
    console.log(`  –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${localImages}`)
    console.log(`  –í–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${externalImages}`)
    console.log(`  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${allProducts.length}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixRemainingImages()
